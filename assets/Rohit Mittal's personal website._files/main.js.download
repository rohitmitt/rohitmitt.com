document.addEventListener('DOMContentLoaded', function() {
    const h1 = document.getElementById('header-text');
    const baseText = "Hi, I'm ";
    const baseTextEndIndex = baseText.lastIndexOf(" ") + 1;
    const array = ["Rohit", "a developer", "a creative", "a learner", "a learner", "Rohitã‹¡ "]

    
    const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
    
    function getCurrentText(wordIdx, cursorIdx) {
        // First word in list? Combine to create a full sentence! 
        if (wordIdx === 0) {
            return (baseText + array[wordIdx]).slice(0, cursorIdx);
        } else {
            return baseText + array[wordIdx].slice(0, cursorIdx);
        }
    }
    
    async function textTypingEffect(element, wordIdx, currCursorIdx=0, typeSpeed=75, duration=500) {
        const endCursorIdx = baseText.length + array[wordIdx].length;
    
        currentText = getCurrentText(wordIdx, currCursorIdx)
    
        element.textContent = currentText + (currCursorIdx === endCursorIdx ? "" : "|");
    
        if (currCursorIdx === endCursorIdx) {
    
            if (wordIdx === 0) {
                duration = 2000;
            }
            else if (wordIdx === array.length-1) {
                duration = 1000;
            }
    
            const cursorInterval = setInterval(() => {
                element.textContent = currentText + (element.textContent.includes("|") ? "" : "|");
            }, 500);
            
            await sleep(duration);
            clearInterval(cursorInterval);
            element.textContent = currentText;
            
            return;
        }
        await sleep(typeSpeed); 

        await textTypingEffect(element, wordIdx, currCursorIdx + 1);
    }
    
    async function textBackspaceEffect(element, wordIdx, currCursorIdx=array[wordIdx].length, backspaceSpeed=35) {
        
        currentText = baseText + array[wordIdx].slice(0, currCursorIdx);
    
        element.textContent = currentText + (currentText.length === baseTextEndIndex ? "" : "|");
    
        if (currentText.length === baseTextEndIndex) {
            element.textContent = currentText;
    
            const cursorInterval = setInterval(() => {
                element.textContent = currentText + (element.textContent.includes("|") ? "" : "|");
            }, 500);
            
            clearInterval(cursorInterval);
    
            return;
        }
        await sleep(backspaceSpeed); 
        await textBackspaceEffect(element, wordIdx, currCursorIdx-1); 
    }
    
    
    async function runSequence() {
        for (i = 0; i < array.length - 1; i++){
            console.log(i);
            await textTypingEffect(h1, i);  // wait for typing to complete
            await textBackspaceEffect(h1, i);  // wait for typing to complete
        }
        await textTypingEffect(h1, array.length-1);  // wait for typing to complete
    }
    
    runSequence();
    
    
});
